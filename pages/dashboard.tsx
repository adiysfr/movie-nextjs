import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { wrapper } from '@/redux/store/store';
import Head from 'next/head'
import Link from 'next/link'
import { getMovie } from '@/redux/slice/Movie';
import { Pagination } from 'antd';
import { Col, Row, Spin, Card, Input } from 'antd';
import { useDebouncedCallback } from 'use-debounce';

const body = {
  key: "action", 
  page: 1
}
const { Search } = Input;
const Dashboard = (props: any) => {
  // props from server
  const propsFromServer = props?.initialState?.reducer?.movie?.data
  const [datas, setDatas] = useState(propsFromServer)

  const dispatch = useDispatch();
  const {data, loading} = useSelector((state) => state.reducer.movie);
  const [page, setPage] = useState(1)
  const [keyword, setKeyword] = useState('action')
  const [isData, setIsData] = useState(true)
  const [errorMessage, setErrorMessage] = useState(true)
  
  
  const handleChangePagin = async (page) => {
    setPage(page)
    let body = {
      key: keyword,
      page: page
    }
    try{
      let res = await dispatch(getMovie(body))
      setDatas(res.payload)
    }
      catch(err){
    }
  }

  const handleSearch = async (val) =>  {
    val === '' ? val = "action" : null
    let body = {
      key: val,
      page: page
    }
    try{
      let res = await dispatch(getMovie(body))
      console.log("ðŸš€ ~ file: Dashboard.tsx:51 ~ handleSearch ~ res", res.payload.Response)
      if(res.payload.Response === "True"){
        setDatas(res.payload)
        setIsData(true)
      }else{
        setDatas(res.payload)
        setIsData(false)
        setErrorMessage(res.payload.Error)
      }
      
    }
      catch(err){
      console.log(err)
    }
  }
  const debounced = useDebouncedCallback((value) => {
    handleSearch(value);
  }, 1000);


  const { Meta } = Card;
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
      <Spin spinning={loading}>
        <Search 
          onChange={(e)=>debounced(e.target.value)} 
          placeholder="input search text" 
          loading={loading} 
          style={{marginBottom: "2rem"}}
        />
        <Row gutter={16}>
          {isData ? (
            datas?.Search?.map(item =>(
              <Col key={item?.imdbID} xs={{span:12}} sm={{span:6}} md={{span:4}}  style={{marginBottom: "1rem"}}>
                <Link href={`/detail/${item?.imdbID}`}>
                  <Card
                    hoverable
                    cover={<img alt="example" src={item?.Poster !== "N/A" ? item?.Poster : `https://static.thenounproject.com/png/3674277-200.png`} />}
                  >
                    <Meta title={item?.Title} description={item?.Year} />
                  </Card>
                </Link>
              </Col>
            ))
          ) : 
          <h1>{errorMessage}</h1>
        }
        </Row>

        {datas?.Search && (
          <Pagination       
            current={page}
            total={datas?.totalResults} 
            onChange={handleChangePagin}
            style={{background: "#e6e6e684", padding: "1rem", borderRadius: "20px"}}
            showSizeChanger={false}
          />
        )}
        </Spin>
      </main>
    </>
  )
}

export const getServerSideProps = wrapper.getServerSideProps(store => async({resolvedUrl}) =>{
  let res = await store.dispatch(getMovie(body))
  return {props: {res}}
})


export default Dashboard

